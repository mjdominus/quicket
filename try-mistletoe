#!/bin/env python3

import mistletoe
import mistletoe.ast_renderer
import mistletoe.html_renderer
from mistletoe.block_token import BlockToken
from mistletoe.span_token import SpanToken

import re

with open("foo.md") as fh:
    md = fh.read()


I = "| "
def dump(node, depth=0):
    type = node.__class__.__name__

    attrs = dict(node.__dict__)
    attrs.pop("children", None)
    indent = I * depth
    print(indent, type, attrs)
    try:
        for c in node.children:
            dump(c, depth+1)
    except AttributeError:
        pass

class Wangle(SpanToken):
    pattern = re.compile(r"\?{3}(.*?)\?{3}", re.DOTALL)
    def __init__(self, match):
        self.match = match.group(1)

class AltHeading(BlockToken):
    p = r'^!!\s+'

    def __init__(self, content):
        self.dummy_attr = "I like pie"
        self.children = [ mistletoe.span_token.RawText(content) ]

    @staticmethod
    def start(line):
        raise exception("OK")
        return line.startswith("!! ")

    @classmethod
    def read(cls, lines):
        line = next(lines)
        return re.sub(p, line)


class MJDRenderer(mistletoe.html_renderer.HTMLRenderer):
    def __init__(self):
        super().__init__(Wangle)

    def render_wangle(self, token):
        raise Exception("OK")


#res = mistletoe.markdown(md)
# rend = mistletoe.markdown(md, MJDRenderer)
with MJDRenderer() as r:
    doc = mistletoe.Document(md)
    rend = r.render(doc)
print(rend)
